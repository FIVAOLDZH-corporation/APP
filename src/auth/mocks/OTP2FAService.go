// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OTP2FAService is an autogenerated mock type for the OTP2FAService type
type OTP2FAService struct {
	mock.Mock
}

// Disable2FA provides a mock function with given fields: ctx, userID
func (_m *OTP2FAService) Disable2FA(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Disable2FA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enable2FA provides a mock function with given fields: ctx, userID
func (_m *OTP2FAService) Enable2FA(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Enable2FA")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enabled2FA provides a mock function with given fields: ctx, userID
func (_m *OTP2FAService) Enabled2FA(ctx context.Context, userID string) bool {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Enabled2FA")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateSecret provides a mock function with given fields: ctx, userID
func (_m *OTP2FAService) GenerateSecret(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateOTP provides a mock function with given fields: ctx, userID, otp
func (_m *OTP2FAService) ValidateOTP(ctx context.Context, userID string, otp string) (bool, error) {
	ret := _m.Called(ctx, userID, otp)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOTP")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, otp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, otp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOTP2FAService creates a new instance of OTP2FAService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTP2FAService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTP2FAService {
	mock := &OTP2FAService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
